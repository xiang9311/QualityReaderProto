// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - CommonRoot

@implementation CommonRoot

@end

#pragma mark - CommonRoot_FileDescriptor

static GPBFileDescriptor *CommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.xiang.proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Category_Enum

GPBEnumDescriptor *Category_Enum_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Main", .number = Category_Enum_Main },
      { .name = "Deep", .number = Category_Enum_Deep },
      { .name = "Images", .number = Category_Enum_Images },
      { .name = "People", .number = Category_Enum_People },
      { .name = "Forfun", .number = Category_Enum_Forfun },
      { .name = "Foreign", .number = Category_Enum_Foreign },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Category_Enum)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:Category_Enum_IsValidValue];
  }
  return descriptor;
}

BOOL Category_Enum_IsValidValue(int32_t value__) {
  switch (value__) {
    case Category_Enum_Main:
    case Category_Enum_Deep:
    case Category_Enum_Images:
    case Category_Enum_People:
    case Category_Enum_Forfun:
    case Category_Enum_Foreign:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ContentType

GPBEnumDescriptor *ContentType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "BigImage", .number = ContentType_BigImage },
      { .name = "Article", .number = ContentType_Article },
      { .name = "ShortArticle", .number = ContentType_ShortArticle },
      { .name = "ImageText", .number = ContentType_ImageText },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ContentType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:ContentType_IsValidValue];
  }
  return descriptor;
}

BOOL ContentType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ContentType_BigImage:
    case ContentType_Article:
    case ContentType_ShortArticle:
    case ContentType_ImageText:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RequestCommon

@implementation RequestCommon

@dynamic userid;
@dynamic userkey;
@dynamic cmdid;
@dynamic timestamp;
@dynamic version;
@dynamic platform;

typedef struct RequestCommon__storage_ {
  uint32_t _has_storage_[1];
  int32_t userid;
  int32_t cmdid;
  int32_t platform;
  NSString *userkey;
  NSString *version;
  int64_t timestamp;
} RequestCommon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = RequestCommon_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(RequestCommon__storage_, userid),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userkey",
        .number = RequestCommon_FieldNumber_Userkey,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RequestCommon__storage_, userkey),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "cmdid",
        .number = RequestCommon_FieldNumber_Cmdid,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(RequestCommon__storage_, cmdid),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "timestamp",
        .number = RequestCommon_FieldNumber_Timestamp,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(RequestCommon__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "version",
        .number = RequestCommon_FieldNumber_Version,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RequestCommon__storage_, version),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "platform",
        .number = RequestCommon_FieldNumber_Platform,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(RequestCommon__storage_, platform),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestCommon class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RequestCommon__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseCommon

@implementation ResponseCommon

@dynamic code;
@dynamic message;
@dynamic cmdid;
@dynamic timestamp;
@dynamic userid;

typedef struct ResponseCommon__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  int32_t cmdid;
  int32_t userid;
  NSString *message;
  int64_t timestamp;
} ResponseCommon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .number = ResponseCommon_FieldNumber_Code,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ResponseCommon__storage_, code),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "message",
        .number = ResponseCommon_FieldNumber_Message,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ResponseCommon__storage_, message),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "cmdid",
        .number = ResponseCommon_FieldNumber_Cmdid,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ResponseCommon__storage_, cmdid),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "timestamp",
        .number = ResponseCommon_FieldNumber_Timestamp,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ResponseCommon__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = ResponseCommon_FieldNumber_Userid,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ResponseCommon__storage_, userid),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseCommon class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ResponseCommon__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Organize

@implementation Organize

@dynamic id_p;
@dynamic name;
@dynamic avatar;

typedef struct Organize__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  NSString *name;
  NSString *avatar;
} Organize__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .number = Organize_FieldNumber_Id_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(Organize__storage_, id_p),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = Organize_FieldNumber_Name,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Organize__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "avatar",
        .number = Organize_FieldNumber_Avatar,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Organize__storage_, avatar),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Organize class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Organize__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImageAndText

@implementation ImageAndText

@dynamic id_p;
@dynamic imageURL;
@dynamic text;

typedef struct ImageAndText__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  NSString *imageURL;
  NSString *text;
} ImageAndText__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .number = ImageAndText_FieldNumber_Id_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ImageAndText__storage_, id_p),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "imageURL",
        .number = ImageAndText_FieldNumber_ImageURL,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ImageAndText__storage_, imageURL),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "text",
        .number = ImageAndText_FieldNumber_Text,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ImageAndText__storage_, text),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\002\006!!\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImageAndText class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ImageAndText__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Article

@implementation Article

@dynamic id_p;
@dynamic hasOrganize, organize;
@dynamic contentType;
@dynamic articleType;
@dynamic title;
@dynamic subContent;
@dynamic content;
@dynamic coverURL;
@dynamic imageAndTextsArray, imageAndTextsArray_Count;
@dynamic uRL;
@dynamic category;
@dynamic createTime;
@dynamic readCount;
@dynamic shareCount;
@dynamic authorName;

typedef struct Article__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t readCount;
  ContentType contentType;
  int32_t articleType;
  Category_Enum category;
  int32_t shareCount;
  Organize *organize;
  NSString *title;
  NSString *subContent;
  NSString *content;
  NSString *coverURL;
  NSMutableArray *imageAndTextsArray;
  NSString *uRL;
  NSString *createTime;
  NSString *authorName;
} Article__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .number = Article_FieldNumber_Id_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(Article__storage_, id_p),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "organize",
        .number = Article_FieldNumber_Organize,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Article__storage_, organize),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Organize),
        .fieldOptions = NULL,
      },
      {
        .name = "readCount",
        .number = Article_FieldNumber_ReadCount,
        .hasIndex = 12,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(Article__storage_, readCount),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "contentType",
        .number = Article_FieldNumber_ContentType,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(Article__storage_, contentType),
        .defaultValue.valueEnum = ContentType_BigImage,
        .dataTypeSpecific.enumDescFunc = ContentType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "articleType",
        .number = Article_FieldNumber_ArticleType,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(Article__storage_, articleType),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "title",
        .number = Article_FieldNumber_Title,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Article__storage_, title),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subContent",
        .number = Article_FieldNumber_SubContent,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Article__storage_, subContent),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "content",
        .number = Article_FieldNumber_Content,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Article__storage_, content),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "coverURL",
        .number = Article_FieldNumber_CoverURL,
        .hasIndex = 7,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Article__storage_, coverURL),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "imageAndTextsArray",
        .number = Article_FieldNumber_ImageAndTextsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Article__storage_, imageAndTextsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ImageAndText),
        .fieldOptions = NULL,
      },
      {
        .name = "uRL",
        .number = Article_FieldNumber_URL,
        .hasIndex = 9,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Article__storage_, uRL),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "category",
        .number = Article_FieldNumber_Category,
        .hasIndex = 10,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(Article__storage_, category),
        .defaultValue.valueEnum = Category_Enum_Main,
        .dataTypeSpecific.enumDescFunc = Category_Enum_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "createTime",
        .number = Article_FieldNumber_CreateTime,
        .hasIndex = 11,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Article__storage_, createTime),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "shareCount",
        .number = Article_FieldNumber_ShareCount,
        .hasIndex = 13,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(Article__storage_, shareCount),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "authorName",
        .number = Article_FieldNumber_AuthorName,
        .hasIndex = 14,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Article__storage_, authorName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\n\003\t\000\004\013\000\005\013\000\007\n\000\t\006!!\000\n\000imageAndTexts\000\013\001!!\000\r\n\000\016\n\000\017\n\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Article class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Article__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Article_ContentType_RawValue(Article *message) {
  GPBDescriptor *descriptor = [Article descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Article_FieldNumber_ContentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetArticle_ContentType_RawValue(Article *message, int32_t value) {
  GPBDescriptor *descriptor = [Article descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Article_FieldNumber_ContentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Article_Category_RawValue(Article *message) {
  GPBDescriptor *descriptor = [Article descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Article_FieldNumber_Category];
  return GPBGetMessageInt32Field(message, field);
}

void SetArticle_Category_RawValue(Article *message, int32_t value) {
  GPBDescriptor *descriptor = [Article descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Article_FieldNumber_Category];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Collect

@implementation Collect

@dynamic id_p;
@dynamic hasOrganize, organize;
@dynamic title;
@dynamic collectTime;
@dynamic articleType;
@dynamic articleId;

typedef struct Collect__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t articleType;
  int32_t articleId;
  Organize *organize;
  NSString *title;
  NSString *collectTime;
} Collect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .number = Collect_FieldNumber_Id_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(Collect__storage_, id_p),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "organize",
        .number = Collect_FieldNumber_Organize,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Collect__storage_, organize),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Organize),
        .fieldOptions = NULL,
      },
      {
        .name = "title",
        .number = Collect_FieldNumber_Title,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Collect__storage_, title),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "collectTime",
        .number = Collect_FieldNumber_CollectTime,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Collect__storage_, collectTime),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "articleType",
        .number = Collect_FieldNumber_ArticleType,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(Collect__storage_, articleType),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "articleId",
        .number = Collect_FieldNumber_ArticleId,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(Collect__storage_, articleId),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\003\004\013\000\005\013\000\007\t\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Collect class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Collect__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DetailUser

@implementation DetailUser

@dynamic userId;
@dynamic userName;
@dynamic avatar;
@dynamic wxNo;
@dynamic wbNo;
@dynamic articlesArray, articlesArray_Count;

typedef struct DetailUser__storage_ {
  uint32_t _has_storage_[1];
  int32_t userId;
  NSString *userName;
  NSString *avatar;
  NSString *wxNo;
  NSString *wbNo;
  NSMutableArray *articlesArray;
} DetailUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = DetailUser_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DetailUser__storage_, userId),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userName",
        .number = DetailUser_FieldNumber_UserName,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DetailUser__storage_, userName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "avatar",
        .number = DetailUser_FieldNumber_Avatar,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DetailUser__storage_, avatar),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "wxNo",
        .number = DetailUser_FieldNumber_WxNo,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DetailUser__storage_, wxNo),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "wbNo",
        .number = DetailUser_FieldNumber_WbNo,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DetailUser__storage_, wbNo),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "articlesArray",
        .number = DetailUser_FieldNumber_ArticlesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DetailUser__storage_, articlesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Article),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\001\006\000\002\010\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DetailUser class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DetailUser__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
